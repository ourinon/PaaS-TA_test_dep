/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.34
 * Generated at: 2022-01-05 00:46:27 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import org.springframework.web.servlet.support.RequestContext;

public final class home_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(2);
    _jspx_dependants.put("jar:file:/C:/DavidFile/Eclipse_File/TestHomePage/.metadata/.plugins/org.eclipse.wst.server.core/tmp0/wtpwebapps/WebHomPage/WEB-INF/lib/jstl-1.2.jar!/META-INF/c.tld", Long.valueOf(1153352682000L));
    _jspx_dependants.put("/WEB-INF/lib/jstl-1.2.jar", Long.valueOf(1641281749066L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("org.springframework.web.servlet.support.RequestContext");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, false, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("<html>\n");
      out.write("<head>\n");
      out.write("\t<title>테스트 홈페이지</title>\n");
      out.write("</head>\n");
      out.write("<body>\n");
      out.write("<h3>\n");
      out.write("\tTest  \n");
      out.write("</h3>\n");
      out.write("\n");
      out.write("<p style=white-space:normal>\n");
      out.write("\n");
      out.write("<br>\n");
      out.write("서블릿 - 자바를 사용해서 동적인 웹 페이지를 만드는 서버 프로그램\n");
      out.write("<br>\n");
      out.write("서블릿 컨테이너 - 서블릿 클래스 규칙에 맞게 서블릿 객체를 생성하고 생명 주기를 관리한다.\n");
      out.write("<br>\n");
      out.write("아파치 - 웹서버와 동일하며 정적 데이터를 관리한다.\n");
      out.write("<br>\n");
      out.write("아파치 톰캣 - WAS와 동일하며 동적 데이터를 관리한다.\n");
      out.write("<br>\n");
      out.write("웹 - 인터넷 상에서 텍스트나 그림, 소리, 영상같은 멀티미디어 정보를 하이퍼텍스트 방식으로 제공한다.\n");
      out.write("<br>\n");
      out.write("소프트웨어 - 컴퓨터에 어떤 일을 처리할 순서와 방법을 지시하는 명령어의 집합체인 프로그램과 같은 의미이며 이중\n");
      out.write("형체를 가지지않는 무형의 영역을 뜻한다.\n");
      out.write("<br>\n");
      out.write("웹 어플리케이션 - 데스크톱 응용 소프트웨어\n");
      out.write("<br>\n");
      out.write("웹 서버 - 네트워크망에 종속되지 않고  웹서비스를 할 수있도록 해주는 어플리케이션\n");
      out.write("<br>\n");
      out.write("미들웨어 - 프로그램들 사이에서 매개역할을 하거나 프레임워크 역할을 한다.\n");
      out.write("<br>\n");
      out.write("웹 컨테이너 - JSP와 서블릿을 실행시킬 수 있는 소프트웨어이다.\n");
      out.write("<br>\n");
      out.write("클라이언트 - 컴퓨터 처리에서 다른 프로그램이 제공하는 어떤 서비스를 요구하는 프로그램이다.\n");
      out.write("<br>\n");
      out.write("OS - 통신망의 관리 기능을 지원 또는 제어하기 위한 정보를 처리하는 독힙령 시스템이며 응용 보수 응용 프로그램이다.\n");
      out.write("<br>\n");
      out.write("바이너리 코드 - 컴퓨터가 인식할수있는 0과 1의 코드\n");
      out.write("<br>\n");
      out.write("서버 TCP/IP = IP는 데이터가 찾아갈 주소, TCP는 데이터가 알맞은 형식으로 왔는지 확인하는 역할이다.\n");
      out.write("<br>\n");
      out.write(" HTTP 클라이언트와 서버 사이의 통신 규약\n");
      out.write(" <br>\n");
      out.write(" 소켓 - 어떤 통신망의 특정 노드상의 측정 서비스를 식별하는 식별자이다.\n");
      out.write(" <br>\n");
      out.write(" 웹 브라우저 - 웹 페이지를 검색 하기 위해 사용하는 프로그램을 웹 브라우저다.\n");
      out.write(" <br>\n");
      out.write(" JSP - HTMl 코드에 JAVA 코드를 넣어서 \"동적\" 웹페이지를 생성하는 도구\n");
      out.write(" <br>\n");
      out.write(" JDK 자바 지벨롭 키트 이고 안에 JRE가 들어가있다. 개발목적이면 해당 폴더 필수\n");
      out.write(" <br>\n");
      out.write(" JRE - 자바 코드를 실행하기 위한 도구들이다.\n");
      out.write(" <br>\n");
      out.write(" 컴포넌트 - 재사용이 가능한 각각의 독립된 모듈\n");
      out.write(" <br>\n");
      out.write(" HTTP는 먼저 클라이언트가 서버에게 요청을하고 응답을 받으면 접속을 끊는 성질이있다.\n");
      out.write(" <br>\n");
      out.write(" 또한 이렇게 통신이 끝나면 상태 정보를 유지하지 않는다. \n");
      out.write(" <br>\n");
      out.write(" 그래서 사용하는게 세션과 쿠키\n");
      out.write(" <br>\n");
      out.write(" 세션 > 쿠키\n");
      out.write(" <br>\n");
      out.write(" 세션과 쿠키는 비슷하다. 왜냐하면 세션을 사용한다면 쿠키역시 사용되기 때문이다.\n");
      out.write(" <br>\n");
      out.write(" 사용자의 정보 저장 위치는 쿠키는 웹 브라우저상에서 저장되지만 세션은 서버측에 저장된다.\n");
      out.write(" <br>\n");
      out.write(" 컨텍스트 - 웹서비스간의 협업 프로세스\n");
      out.write(" \n");
      out.write(" \n");
      out.write("  \n");
      out.write("</p>\n");
      out.write("\n");
      out.write("<P>  지금시간은 ");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${serverTime}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write(" 입니다. </P>\n");
      out.write("\n");
      out.write("\n");
      out.write("<a href=\"/Test\" >이동하기</a>\n");
      out.write("\n");
      out.write("</body>\n");
      out.write("</html>\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
